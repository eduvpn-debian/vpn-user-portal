Description: fix path to autoload script


--- vpn-user-portal-0.1.orig/bin/add-user.php
+++ vpn-user-portal-0.1/bin/add-user.php
@@ -16,7 +16,8 @@
  *  You should have received a copy of the GNU Affero General Public License
  *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
-require_once sprintf('%s/vendor/autoload.php', dirname(__DIR__));
+$baseDir = '/usr/share/vpn-user-portal';
+require_once sprintf('%s/vendor/autoload.php', $baseDir);
 
 use SURFnet\VPN\Common\CliParser;
 use SURFnet\VPN\Common\Config;
@@ -39,7 +40,7 @@ try {
 
     $instanceId = $opt->hasItem('instance') ? $opt->getItem('instance') : 'default';
 
-    $configFile = sprintf('%s/config/%s/config.php', dirname(__DIR__), $instanceId);
+    $configFile = sprintf('%s/config/%s/config.php', $baseDir, $instanceId);
     $config = Config::fromFile($configFile);
     $configData = $config->toArray();
     $passwordHash = password_hash($opt->getItem('pass'), PASSWORD_DEFAULT);
--- vpn-user-portal-0.1.orig/bin/foreign-key-list-fetcher.php
+++ vpn-user-portal-0.1/bin/foreign-key-list-fetcher.php
@@ -16,7 +16,8 @@
  *  You should have received a copy of the GNU Affero General Public License
  *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
-require_once sprintf('%s/vendor/autoload.php', dirname(__DIR__));
+$baseDir = '/usr/share/vpn-user-portal';
+require_once sprintf('%s/vendor/autoload.php', $baseDir);
 
 use fkooman\OAuth\Client\Http\CurlHttpClient;
 use SURFnet\VPN\Common\CliParser;
@@ -39,14 +40,14 @@ try {
 
     $instanceId = $opt->hasItem('instance') ? $opt->getItem('instance') : 'default';
 
-    $configFile = sprintf('%s/config/%s/config.php', dirname(__DIR__), $instanceId);
+    $configFile = sprintf('%s/config/%s/config.php', $baseDir, $instanceId);
     $config = Config::fromFile($configFile);
 
     if ($config->getSection('Api')->hasItem('foreignKeyListSource')) {
         $publicKeysSource = $config->getSection('Api')->getItem('foreignKeyListSource');
         $publicKeysSourcePublicKey = $config->getSection('Api')->getItem('foreignKeyListPublicKey');
 
-        $foreignKeyListFetcher = new ForeignKeyListFetcher(sprintf('%s/data/%s/foreign_key_list.json', dirname(__DIR__), $instanceId));
+        $foreignKeyListFetcher = new ForeignKeyListFetcher(sprintf('%s/data/%s/foreign_key_list.json', $baseDir, $instanceId));
         $foreignKeyListFetcher->update(new CurlHttpClient(), $publicKeysSource, $publicKeysSourcePublicKey);
     }
 } catch (Exception $e) {
--- vpn-user-portal-0.1.orig/bin/init.php
+++ vpn-user-portal-0.1/bin/init.php
@@ -16,7 +16,8 @@
  *  You should have received a copy of the GNU Affero General Public License
  *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
-require_once sprintf('%s/vendor/autoload.php', dirname(__DIR__));
+$baseDir = '/usr/share/vpn-user-portal';
+require_once sprintf('%s/vendor/autoload.php', $baseDir);
 
 use SURFnet\VPN\Common\CliParser;
 use SURFnet\VPN\Common\FileIO;
@@ -37,7 +38,7 @@ try {
 
     $instanceId = $opt->hasItem('instance') ? $opt->getItem('instance') : 'default';
     $keyPairData = base64_encode(\Sodium\crypto_sign_keypair());
-    $keyPairFile = sprintf('%s/data/%s/OAuth.key', dirname(__DIR__), $instanceId);
+    $keyPairFile = sprintf('%s/data/%s/OAuth.key', $baseDir, $instanceId);
     FileIO::writeFile($keyPairFile, $keyPairData);
 } catch (Exception $e) {
     echo sprintf('ERROR: %s', $e->getMessage()).PHP_EOL;
--- vpn-user-portal-0.1.orig/bin/show-public-key.php
+++ vpn-user-portal-0.1/bin/show-public-key.php
@@ -16,7 +16,8 @@
  *  You should have received a copy of the GNU Affero General Public License
  *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
-require_once sprintf('%s/vendor/autoload.php', dirname(__DIR__));
+$baseDir = '/usr/share/vpn-user-portal';
+require_once sprintf('%s/vendor/autoload.php', $baseDir);
 
 use SURFnet\VPN\Common\CliParser;
 use SURFnet\VPN\Common\FileIO;
@@ -36,7 +37,7 @@ try {
     }
 
     $instanceId = $opt->hasItem('instance') ? $opt->getItem('instance') : 'default';
-    $keyPairFile = sprintf('%s/data/%s/OAuth.key', dirname(__DIR__), $instanceId);
+    $keyPairFile = sprintf('%s/data/%s/OAuth.key', $baseDir, $instanceId);
     echo base64_encode(
         \Sodium\crypto_sign_publickey(
             base64_decode(
